// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go

// Package mock_usecase is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	model "modz/model"
	reflect "reflect"
)

// MockUser is a mock of User interface
type MockUser struct {
	ctrl     *gomock.Controller
	recorder *MockUserMockRecorder
}

// MockUserMockRecorder is the mock recorder for MockUser
type MockUserMockRecorder struct {
	mock *MockUser
}

// NewMockUser creates a new mock instance
func NewMockUser(ctrl *gomock.Controller) *MockUser {
	mock := &MockUser{ctrl: ctrl}
	mock.recorder = &MockUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUser) EXPECT() *MockUserMockRecorder {
	return m.recorder
}

// Info mocks base method
func (m *MockUser) Info(clientID string) (*model.UserInformation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Info", clientID)
	ret0, _ := ret[0].(*model.UserInformation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Info indicates an expected call of Info
func (mr *MockUserMockRecorder) Info(clientID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockUser)(nil).Info), clientID)
}

// Orders mocks base method
func (m *MockUser) Orders(clientID string) (*model.OrdersHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Orders", clientID)
	ret0, _ := ret[0].(*model.OrdersHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Orders indicates an expected call of Orders
func (mr *MockUserMockRecorder) Orders(clientID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Orders", reflect.TypeOf((*MockUser)(nil).Orders), clientID)
}

// SendOSMICard mocks base method
func (m *MockUser) SendOSMICard(clientID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendOSMICard", clientID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendOSMICard indicates an expected call of SendOSMICard
func (mr *MockUserMockRecorder) SendOSMICard(clientID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendOSMICard", reflect.TypeOf((*MockUser)(nil).SendOSMICard), clientID)
}

// MockMobile is a mock of Mobile interface
type MockMobile struct {
	ctrl     *gomock.Controller
	recorder *MockMobileMockRecorder
}

// MockMobileMockRecorder is the mock recorder for MockMobile
type MockMobileMockRecorder struct {
	mock *MockMobile
}

// NewMockMobile creates a new mock instance
func NewMockMobile(ctrl *gomock.Controller) *MockMobile {
	mock := &MockMobile{ctrl: ctrl}
	mock.recorder = &MockMobileMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMobile) EXPECT() *MockMobileMockRecorder {
	return m.recorder
}

// Creation mocks base method
func (m *MockMobile) Creation(deviceUUID, id, vendor, md string) (model.Answer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Creation", deviceUUID, id, vendor, md)
	ret0, _ := ret[0].(model.Answer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Creation indicates an expected call of Creation
func (mr *MockMobileMockRecorder) Creation(deviceUUID, id, vendor, md interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Creation", reflect.TypeOf((*MockMobile)(nil).Creation), deviceUUID, id, vendor, md)
}

// Authorization mocks base method
func (m *MockMobile) Authorization(deviceUUID string) (model.Answer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authorization", deviceUUID)
	ret0, _ := ret[0].(model.Answer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Authorization indicates an expected call of Authorization
func (mr *MockMobileMockRecorder) Authorization(deviceUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authorization", reflect.TypeOf((*MockMobile)(nil).Authorization), deviceUUID)
}

// Registration mocks base method
func (m *MockMobile) Registration(deviceUUID string, user map[string]string) (model.Answer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Registration", deviceUUID, user)
	ret0, _ := ret[0].(model.Answer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Registration indicates an expected call of Registration
func (mr *MockMobileMockRecorder) Registration(deviceUUID, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Registration", reflect.TypeOf((*MockMobile)(nil).Registration), deviceUUID, user)
}

// Code mocks base method
func (m *MockMobile) Code(numberPhone string) (model.Answer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Code", numberPhone)
	ret0, _ := ret[0].(model.Answer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Code indicates an expected call of Code
func (mr *MockMobileMockRecorder) Code(numberPhone interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Code", reflect.TypeOf((*MockMobile)(nil).Code), numberPhone)
}

// CheckCode mocks base method
func (m *MockMobile) CheckCode(numberPhone, code string) (model.Answer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckCode", numberPhone, code)
	ret0, _ := ret[0].(model.Answer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckCode indicates an expected call of CheckCode
func (mr *MockMobileMockRecorder) CheckCode(numberPhone, code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckCode", reflect.TypeOf((*MockMobile)(nil).CheckCode), numberPhone, code)
}

// EditUser mocks base method
func (m *MockMobile) EditUser(deviceUUID, userID, numberPhone string) (model.Answer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditUser", deviceUUID, userID, numberPhone)
	ret0, _ := ret[0].(model.Answer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EditUser indicates an expected call of EditUser
func (mr *MockMobileMockRecorder) EditUser(deviceUUID, userID, numberPhone interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditUser", reflect.TypeOf((*MockMobile)(nil).EditUser), deviceUUID, userID, numberPhone)
}
