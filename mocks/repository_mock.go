// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock_repository is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockUserRepo is a mock of UserRepo interface
type MockUserRepo struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepoMockRecorder
}

// MockUserRepoMockRecorder is the mock recorder for MockUserRepo
type MockUserRepoMockRecorder struct {
	mock *MockUserRepo
}

// NewMockUserRepo creates a new mock instance
func NewMockUserRepo(ctrl *gomock.Controller) *MockUserRepo {
	mock := &MockUserRepo{ctrl: ctrl}
	mock.recorder = &MockUserRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserRepo) EXPECT() *MockUserRepoMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockUserRepo) Get(url, body string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", url, body)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockUserRepoMockRecorder) Get(url, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockUserRepo)(nil).Get), url, body)
}

// GetUserOrders mocks base method
func (m *MockUserRepo) GetUserOrders(clientID string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserOrders", clientID)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserOrders indicates an expected call of GetUserOrders
func (mr *MockUserRepoMockRecorder) GetUserOrders(clientID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserOrders", reflect.TypeOf((*MockUserRepo)(nil).GetUserOrders), clientID)
}

// SendOSMICard mocks base method
func (m *MockUserRepo) SendOSMICard(clientID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendOSMICard", clientID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendOSMICard indicates an expected call of SendOSMICard
func (mr *MockUserRepoMockRecorder) SendOSMICard(clientID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendOSMICard", reflect.TypeOf((*MockUserRepo)(nil).SendOSMICard), clientID)
}

// MockMobileRepo is a mock of MobileRepo interface
type MockMobileRepo struct {
	ctrl     *gomock.Controller
	recorder *MockMobileRepoMockRecorder
}

// MockMobileRepoMockRecorder is the mock recorder for MockMobileRepo
type MockMobileRepoMockRecorder struct {
	mock *MockMobileRepo
}

// NewMockMobileRepo creates a new mock instance
func NewMockMobileRepo(ctrl *gomock.Controller) *MockMobileRepo {
	mock := &MockMobileRepo{ctrl: ctrl}
	mock.recorder = &MockMobileRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMobileRepo) EXPECT() *MockMobileRepoMockRecorder {
	return m.recorder
}

// Creation mocks base method
func (m *MockMobileRepo) Creation(deviceUUID, id, vendor, model string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Creation", deviceUUID, id, vendor, model)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Creation indicates an expected call of Creation
func (mr *MockMobileRepoMockRecorder) Creation(deviceUUID, id, vendor, model interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Creation", reflect.TypeOf((*MockMobileRepo)(nil).Creation), deviceUUID, id, vendor, model)
}

// Authorization mocks base method
func (m *MockMobileRepo) Authorization(deviceUUID string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authorization", deviceUUID)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Authorization indicates an expected call of Authorization
func (mr *MockMobileRepoMockRecorder) Authorization(deviceUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authorization", reflect.TypeOf((*MockMobileRepo)(nil).Authorization), deviceUUID)
}

// Registration mocks base method
func (m *MockMobileRepo) Registration(deviceUUID string, user map[string]string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Registration", deviceUUID, user)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Registration indicates an expected call of Registration
func (mr *MockMobileRepoMockRecorder) Registration(deviceUUID, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Registration", reflect.TypeOf((*MockMobileRepo)(nil).Registration), deviceUUID, user)
}

// Code mocks base method
func (m *MockMobileRepo) Code(phone string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Code", phone)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Code indicates an expected call of Code
func (mr *MockMobileRepoMockRecorder) Code(phone interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Code", reflect.TypeOf((*MockMobileRepo)(nil).Code), phone)
}

// CheckCode mocks base method
func (m *MockMobileRepo) CheckCode(numberPhone, code string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckCode", numberPhone, code)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckCode indicates an expected call of CheckCode
func (mr *MockMobileRepoMockRecorder) CheckCode(numberPhone, code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckCode", reflect.TypeOf((*MockMobileRepo)(nil).CheckCode), numberPhone, code)
}

// EditUser mocks base method
func (m *MockMobileRepo) EditUser(deviceUUID, userID, numberPhone string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditUser", deviceUUID, userID, numberPhone)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EditUser indicates an expected call of EditUser
func (mr *MockMobileRepoMockRecorder) EditUser(deviceUUID, userID, numberPhone interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditUser", reflect.TypeOf((*MockMobileRepo)(nil).EditUser), deviceUUID, userID, numberPhone)
}
